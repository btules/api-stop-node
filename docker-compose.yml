version: '3.8'

services:
# inicio banco
  mysqldb:
    container_name: mysqldb
    image: mysql
    ports:
      - "3307:3307"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: banco_stop
    volumes:
      - ./sql-scripts:/docker-entrypoint-initdb.d
      - ./mysql-data:/var/lib/mysql
      - ./mysql-docker/mysql-cluster/8.0/cnf/mysql-cluster.cnf:/etc/mysql/mysql.conf.d/mysql-cluster.cnf
    networks:
      - stop-api-net

  management1:
    image: mysql-docker/mysql-cluster
    container_name: management1
    networks:
      mysql-cluster:
        ipv4_address: "192.168.0.2"
    command: ndb_mgmd

  ndb1:
    image: mysql/mysql-cluster
    container_name: ndb1
    networks:
      mysql-cluster:
        ipv4_address: "192.168.0.3"
    command: ndbd

  ndb2:
    image: mysql/mysql-cluster
    container_name: ndb2
    networks:
      mysql-cluster:
        ipv4_address: "192.168.0.4"
    command: ndbd

  mysql1:
    image: mysql/mysql-cluster
    container_name: mysql1
    networks:
      mysql-cluster:
        ipv4_address: "192.168.0.10"
      stop-api-net:
    ports:
      - "3308:3307"
    volumes:
      - ./mysql-docker/mysql-cluster/8.0/cnf/mysql-cluster.cnf:/etc/mysql/mysql.conf.d/mysql-cluster.cnf
    environment:
      MYSQL_ROOT_PASSWORD: 220c.
    command: mysqld

  mysql2:
    image: mysql/mysql-cluster
    container_name: mysql2
    networks:
      stop-api-net:
      mysql-cluster:
        ipv4_address: "192.168.0.9"
    ports:
      - "3309:3307"
    volumes:
      - ./mysql-docker/mysql-cluster/8.0/cnf/mysql-cluster.cnf:/etc/mysql/mysql.conf.d/mysql-cluster.cnf
    environment:
      MYSQL_ROOT_PASSWORD: 220c.
    command: mysqld
# final banco

# containers do projeto

  api-stop3001:
    container_name: api-stop3001
    image: api-stop-node
    hostname: api-stop3001
    ports:
      - "3001:3000"
    depends_on:
      - mysqldb
    environment:
      MYSQL_HOST: mysqldb
      MYSQL_PASSWORD: root
      MYSQL_PORT: 3306
      SERVER_PORT: 3001
    networks:
      - stop-api-net
    restart: always


  api-stop3002:
    container_name: api-stop3002
    image: api-stop-node
    hostname: api-stop3002
    ports:
      - "3002:3000"
    depends_on:
      - mysqldb
    environment:
      MYSQL_HOST: mysqldb
      MYSQL_PASSWORD: root
      MYSQL_PORT: 3306
      SERVER_PORT: 3002
    networks:
      - stop-api-net
    restart: always


  api-stop3003:
    container_name: api-stop3003
    image: api-stop-node
    hostname: api-stop3003
    ports:
      - "3003:3000"
    depends_on:
      - mysqldb
    environment:
      MYSQL_HOST: mysqldb
      MYSQL_PASSWORD: root
      MYSQL_PORT: 3306
      SERVER_PORT: 3003
    networks:
      - stop-api-net
    restart: always

# final do projeto

  nginx:
    build:
      dockerfile: Dockerfile
      context: ./nginx
    container_name: proxy
    ports:
      - "8080:8080"
    depends_on:
      - api-stop3001
      - api-stop3002
      - api-stop3003
    networks:
      - stop-api-net

networks:
  mysql-cluster:
    ipam:
      driver: default
      config:
        - subnet: 192.168.0.0/16
  stop-api-net:
    external: true
    
